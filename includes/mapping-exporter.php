<?php
/**
 * Mapping Exporter for Blogger Import Open Source
 *
 * This file handles generating mapping files for URL redirection.
 *
 * @package Blogger_Import_OpenSource
 */

// If this file is called directly, abort.
if (!defined('WPINC')) {
    die;
}

/**
 * Class responsible for mapping exports
 */
class BIO_Mapping_Exporter {
    /**
     * Generate mapping data
     *
     * @return array Mapping data
     */
    public static function generate_mapping_data() {
        // Get all mappings from database
        $mappings = BIO_DB_Handler::get_all_mappings();
        
        // Allow filtering
        $mappings = apply_filters('bio_mapping_data', $mappings);
        
        return $mappings;
    }
    
    /**
     * Export mapping as JSON
     *
     * @return string JSON data
     */
    public static function export_as_json() {
        $mappings = self::generate_mapping_data();
        return wp_json_encode($mappings, JSON_PRETTY_PRINT);
    }
    
    /**
     * Export mapping as CSV
     *
     * @return string CSV data
     */
    public static function export_as_csv() {
        $mappings = self::generate_mapping_data();
        
        // Create CSV header
        $csv = "blogger_id,blogger_url,wp_id,wp_url,post_type\n";
        
        // Add rows
        foreach ($mappings as $item) {
            $csv .= '"' . esc_attr($item['blogger_id']) . '",';
            $csv .= '"' . esc_attr($item['blogger_url']) . '",';
            $csv .= '"' . esc_attr($item['wp_id']) . '",';
            $csv .= '"' . esc_attr($item['wp_url']) . '",';
            $csv .= '"' . esc_attr($item['post_type']) . '"' . "\n";
        }
        
        return $csv;
    }
    
    /**
     * Export mapping as PHP array for redirect rules
     *
     * @return string PHP code
     */
    public static function export_as_php_redirects() {
        $mappings = self::generate_mapping_data();
        
        $php = "<?php\n";
        $php .= "/**\n";
        $php .= " * Blogger to WordPress redirects\n";
        $php .= " * Generated by Blogger Import Open Source\n";
        $php .= " * Date: " . date('Y-m-d H:i:s') . "\n";
        $php .= " */\n\n";
        
        $php .= "function blogger_to_wordpress_redirects() {\n";
        $php .= "    \$redirects = array(\n";
        
        foreach ($mappings as $item) {
            // Extract path from Blogger URL
            $blogger_path = parse_url($item['blogger_url'], PHP_URL_PATH);
            
            if (!empty($blogger_path)) {
                $php .= "        '" . esc_js($blogger_path) . "' => '" . esc_js($item['wp_url']) . "',\n";
            }
        }
        
        $php .= "    );\n\n";
        $php .= "    \$request_path = parse_url(\$_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n";
        $php .= "    if (isset(\$redirects[\$request_path])) {\n";
        $php .= "        header('HTTP/1.1 301 Moved Permanently');\n";
        $php .= "        header('Location: ' . \$redirects[\$request_path]);\n";
        $php .= "        exit();\n";
        $php .= "    }\n";
        $php .= "}\n\n";
        $php .= "add_action('template_redirect', 'blogger_to_wordpress_redirects');\n";
        
        return $php;
    }
    
    /**
     * Export mapping as .htaccess rules
     *
     * @return string .htaccess rules
     */
    public static function export_as_htaccess() {
        $mappings = self::generate_mapping_data();
        
        $htaccess = "# Blogger to WordPress redirects\n";
        $htaccess .= "# Generated by Blogger Import Open Source\n";
        $htaccess .= "# Date: " . date('Y-m-d H:i:s') . "\n\n";
        
        $htaccess .= "<IfModule mod_rewrite.c>\n";
        $htaccess .= "RewriteEngine On\n\n";
        
        foreach ($mappings as $item) {
            // Extract path from Blogger URL
            $blogger_path = parse_url($item['blogger_url'], PHP_URL_PATH);
            
            if (!empty($blogger_path)) {
                $wp_path = parse_url($item['wp_url'], PHP_URL_PATH);
                
                if (!empty($wp_path)) {
                    $htaccess .= "RewriteRule ^" . str_replace('/', '\\/', ltrim($blogger_path, '/')) . "$ " . 
                                 $wp_path . " [R=301,L]\n";
                }
            }
        }
        
        $htaccess .= "</IfModule>\n";
        
        return $htaccess;
    }
    
    /**
     * Export mapping as nginx rules
     *
     * @return string Nginx rules
     */
    public static function export_as_nginx() {
        $mappings = self::generate_mapping_data();
        
        $nginx = "# Blogger to WordPress redirects\n";
        $nginx .= "# Generated by Blogger Import Open Source\n";
        $nginx .= "# Date: " . date('Y-m-d H:i:s') . "\n\n";
        
        foreach ($mappings as $item) {
            // Extract path from Blogger URL
            $blogger_path = parse_url($item['blogger_url'], PHP_URL_PATH);
            
            if (!empty($blogger_path)) {
                $wp_path = parse_url($item['wp_url'], PHP_URL_PATH);
                
                if (!empty($wp_path)) {
                    $nginx .= "location " . $blogger_path . " {\n";
                    $nginx .= "    return 301 " . $wp_path . ";\n";
                    $nginx .= "}\n\n";
                }
            }
        }
        
        return $nginx;
    }
    
    /**
     * Handle download request for mapping file
     *
     * @param string $format Format (json, csv, php, htaccess, nginx)
     * @return void
     */
    public static function download($format = 'csv') {
        // Check capabilities
        if (!bio_current_user_can_import()) {
            wp_die(__('You do not have sufficient permissions to access this page.', 'blogger-import-opensource'));
        }
        
        // Verify nonce
        if (
            !isset($_GET['_wpnonce']) || 
            !wp_verify_nonce($_GET['_wpnonce'], 'bio_download_mapping')
        ) {
            wp_die(__('Security check failed.', 'blogger-import-opensource'));
        }
        
        // Generate file based on format
        $content = '';
        $filename = 'blogger-wp-mapping-' . date('Y-m-d') . '.';
        $mime_type = '';
        
        switch ($format) {
            case 'json':
                $content = self::export_as_json();
                $filename .= 'json';
                $mime_type = 'application/json';
                break;
                
            case 'php':
                $content = self::export_as_php_redirects();
                $filename .= 'php';
                $mime_type = 'application/octet-stream';
                break;
                
            case 'htaccess':
                $content = self::export_as_htaccess();
                $filename .= 'htaccess';
                $mime_type = 'application/octet-stream';
                break;
                
            case 'nginx':
                $content = self::export_as_nginx();
                $filename .= 'conf';
                $mime_type = 'application/octet-stream';
                break;
                
            case 'csv':
            default:
                $content = self::export_as_csv();
                $filename .= 'csv';
                $mime_type = 'text/csv';
                break;
        }
        
        // Send file headers
        header('Content-Type: ' . $mime_type);
        header('Content-Disposition: attachment; filename="' . $filename . '"');
        header('Content-Length: ' . strlen($content));
        header('Connection: close');
        
        // Output content and exit
        echo $content;
        exit;
    }
}

/**
 * Generate mapping data
 *
 * @return array Mapping data
 */
function bio_generate_mapping_data() {
    return BIO_Mapping_Exporter::generate_mapping_data();
}

/**
 * Export mapping as JSON
 *
 * @return string JSON data
 */
function bio_export_mapping_as_json() {
    return BIO_Mapping_Exporter::export_as_json();
}

/**
 * Export mapping as CSV
 *
 * @return string CSV data
 */
function bio_export_mapping_as_csv() {
    return BIO_Mapping_Exporter::export_as_csv();
}

/**
 * Export mapping as PHP redirects
 *
 * @return string PHP code
 */
function bio_export_mapping_as_php() {
    return BIO_Mapping_Exporter::export_as_php_redirects();
}

/**
 * Export mapping as .htaccess rules
 *
 * @return string .htaccess rules
 */
function bio_export_mapping_as_htaccess() {
    return BIO_Mapping_Exporter::export_as_htaccess();
}

/**
 * Export mapping as nginx rules
 *
 * @return string Nginx rules
 */
function bio_export_mapping_as_nginx() {
    return BIO_Mapping_Exporter::export_as_nginx();
}